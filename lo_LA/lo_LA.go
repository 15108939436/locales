package lo_LA

import (
	"math"
	"strconv"
	"time"

	"github.com/go-playground/locales"
	"github.com/go-playground/locales/currency"
)

type lo_LA struct {
	locale                 string
	pluralsCardinal        []locales.PluralRule
	pluralsOrdinal         []locales.PluralRule
	decimal                []byte
	group                  []byte
	minus                  []byte
	percent                []byte
	perMille               []byte
	timeSeparator          []byte
	inifinity              []byte
	currencies             [][]byte // idx = enum of currency code
	currencyNegativePrefix []byte
	monthsAbbreviated      [][]byte
	monthsNarrow           [][]byte
	monthsWide             [][]byte
	daysAbbreviated        [][]byte
	daysNarrow             [][]byte
	daysShort              [][]byte
	daysWide               [][]byte
	periodsAbbreviated     [][]byte
	periodsNarrow          [][]byte
	periodsShort           [][]byte
	periodsWide            [][]byte
	erasAbbreviated        [][]byte
	erasNarrow             [][]byte
	erasWide               [][]byte
	timezones              map[string][]byte
}

// New returns a new instance of translator for the 'lo_LA' locale
func New() locales.Translator {
	return &lo_LA{
		locale:                 "lo_LA",
		pluralsCardinal:        []locales.PluralRule{6},
		pluralsOrdinal:         []locales.PluralRule{2, 6},
		decimal:                []byte{0x2c},
		group:                  []byte{0x2e},
		minus:                  []byte{0x2d},
		percent:                []byte{0x25},
		perMille:               []byte{0xe2, 0x80, 0xb0},
		timeSeparator:          []byte{0x3a},
		inifinity:              []byte{0xe2, 0x88, 0x9e},
		currencies:             [][]uint8{{0x41, 0x44, 0x50}, {0x41, 0x45, 0x44}, {0x41, 0x46, 0x41}, {0x41, 0x46, 0x4e}, {0x41, 0x4c, 0x4b}, {0x41, 0x4c, 0x4c}, {0x41, 0x4d, 0x44}, {0x41, 0x4e, 0x47}, {0x41, 0x4f, 0x41}, {0x41, 0x4f, 0x4b}, {0x41, 0x4f, 0x4e}, {0x41, 0x4f, 0x52}, {0x41, 0x52, 0x41}, {0x41, 0x52, 0x4c}, {0x41, 0x52, 0x4d}, {0x41, 0x52, 0x50}, {0x41, 0x52, 0x53}, {0x41, 0x54, 0x53}, {0x41, 0x55, 0x44}, {0x41, 0x57, 0x47}, {0x41, 0x5a, 0x4d}, {0x41, 0x5a, 0x4e}, {0x42, 0x41, 0x44}, {0x42, 0x41, 0x4d}, {0x42, 0x41, 0x4e}, {0x42, 0x42, 0x44}, {0x42, 0x44, 0x54}, {0x42, 0x45, 0x43}, {0x42, 0x45, 0x46}, {0x42, 0x45, 0x4c}, {0x42, 0x47, 0x4c}, {0x42, 0x47, 0x4d}, {0x42, 0x47, 0x4e}, {0x42, 0x47, 0x4f}, {0x42, 0x48, 0x44}, {0x42, 0x49, 0x46}, {0x42, 0x4d, 0x44}, {0x42, 0x4e, 0x44}, {0x42, 0x4f, 0x42}, {0x42, 0x4f, 0x4c}, {0x42, 0x4f, 0x50}, {0x42, 0x4f, 0x56}, {0x42, 0x52, 0x42}, {0x42, 0x52, 0x43}, {0x42, 0x52, 0x45}, {0x42, 0x52, 0x4c}, {0x42, 0x52, 0x4e}, {0x42, 0x52, 0x52}, {0x42, 0x52, 0x5a}, {0x42, 0x53, 0x44}, {0x42, 0x54, 0x4e}, {0x42, 0x55, 0x4b}, {0x42, 0x57, 0x50}, {0x42, 0x59, 0x42}, {0x42, 0x59, 0x52}, {0x42, 0x5a, 0x44}, {0x43, 0x41, 0x44}, {0x43, 0x44, 0x46}, {0x43, 0x48, 0x45}, {0x43, 0x48, 0x46}, {0x43, 0x48, 0x57}, {0x43, 0x4c, 0x45}, {0x43, 0x4c, 0x46}, {0x43, 0x4c, 0x50}, {0x43, 0x4e, 0x58}, {0x43, 0x4e, 0x59}, {0x43, 0x4f, 0x50}, {0x43, 0x4f, 0x55}, {0x43, 0x52, 0x43}, {0x43, 0x53, 0x44}, {0x43, 0x53, 0x4b}, {0x43, 0x55, 0x43}, {0x43, 0x55, 0x50}, {0x43, 0x56, 0x45}, {0x43, 0x59, 0x50}, {0x43, 0x5a, 0x4b}, {0x44, 0x44, 0x4d}, {0x44, 0x45, 0x4d}, {0x44, 0x4a, 0x46}, {0x44, 0x4b, 0x4b}, {0x44, 0x4f, 0x50}, {0x44, 0x5a, 0x44}, {0x45, 0x43, 0x53}, {0x45, 0x43, 0x56}, {0x45, 0x45, 0x4b}, {0x45, 0x47, 0x50}, {0x45, 0x52, 0x4e}, {0x45, 0x53, 0x41}, {0x45, 0x53, 0x42}, {0x45, 0x53, 0x50}, {0x45, 0x54, 0x42}, {0x45, 0x55, 0x52}, {0x46, 0x49, 0x4d}, {0x46, 0x4a, 0x44}, {0x46, 0x4b, 0x50}, {0x46, 0x52, 0x46}, {0x47, 0x42, 0x50}, {0x47, 0x45, 0x4b}, {0x47, 0x45, 0x4c}, {0x47, 0x48, 0x43}, {0x47, 0x48, 0x53}, {0x47, 0x49, 0x50}, {0x47, 0x4d, 0x44}, {0x47, 0x4e, 0x46}, {0x47, 0x4e, 0x53}, {0x47, 0x51, 0x45}, {0x47, 0x52, 0x44}, {0x47, 0x54, 0x51}, {0x47, 0x57, 0x45}, {0x47, 0x57, 0x50}, {0x47, 0x59, 0x44}, {0x48, 0x4b, 0x44}, {0x48, 0x4e, 0x4c}, {0x48, 0x52, 0x44}, {0x48, 0x52, 0x4b}, {0x48, 0x54, 0x47}, {0x48, 0x55, 0x46}, {0x49, 0x44, 0x52}, {0x49, 0x45, 0x50}, {0x49, 0x4c, 0x50}, {0x49, 0x4c, 0x52}, {0x49, 0x4c, 0x53}, {0x49, 0x4e, 0x52}, {0x49, 0x51, 0x44}, {0x49, 0x52, 0x52}, {0x49, 0x53, 0x4a}, {0x49, 0x53, 0x4b}, {0x49, 0x54, 0x4c}, {0x4a, 0x4d, 0x44}, {0x4a, 0x4f, 0x44}, {0x4a, 0x50, 0x59}, {0x4b, 0x45, 0x53}, {0x4b, 0x47, 0x53}, {0x4b, 0x48, 0x52}, {0x4b, 0x4d, 0x46}, {0x4b, 0x50, 0x57}, {0x4b, 0x52, 0x48}, {0x4b, 0x52, 0x4f}, {0x4b, 0x52, 0x57}, {0x4b, 0x57, 0x44}, {0x4b, 0x59, 0x44}, {0x4b, 0x5a, 0x54}, {0x4c, 0x41, 0x4b}, {0x4c, 0x42, 0x50}, {0x4c, 0x4b, 0x52}, {0x4c, 0x52, 0x44}, {0x4c, 0x53, 0x4c}, {0x4c, 0x54, 0x4c}, {0x4c, 0x54, 0x54}, {0x4c, 0x55, 0x43}, {0x4c, 0x55, 0x46}, {0x4c, 0x55, 0x4c}, {0x4c, 0x56, 0x4c}, {0x4c, 0x56, 0x52}, {0x4c, 0x59, 0x44}, {0x4d, 0x41, 0x44}, {0x4d, 0x41, 0x46}, {0x4d, 0x43, 0x46}, {0x4d, 0x44, 0x43}, {0x4d, 0x44, 0x4c}, {0x4d, 0x47, 0x41}, {0x4d, 0x47, 0x46}, {0x4d, 0x4b, 0x44}, {0x4d, 0x4b, 0x4e}, {0x4d, 0x4c, 0x46}, {0x4d, 0x4d, 0x4b}, {0x4d, 0x4e, 0x54}, {0x4d, 0x4f, 0x50}, {0x4d, 0x52, 0x4f}, {0x4d, 0x54, 0x4c}, {0x4d, 0x54, 0x50}, {0x4d, 0x55, 0x52}, {0x4d, 0x56, 0x50}, {0x4d, 0x56, 0x52}, {0x4d, 0x57, 0x4b}, {0x4d, 0x58, 0x4e}, {0x4d, 0x58, 0x50}, {0x4d, 0x58, 0x56}, {0x4d, 0x59, 0x52}, {0x4d, 0x5a, 0x45}, {0x4d, 0x5a, 0x4d}, {0x4d, 0x5a, 0x4e}, {0x4e, 0x41, 0x44}, {0x4e, 0x47, 0x4e}, {0x4e, 0x49, 0x43}, {0x4e, 0x49, 0x4f}, {0x4e, 0x4c, 0x47}, {0x4e, 0x4f, 0x4b}, {0x4e, 0x50, 0x52}, {0x4e, 0x5a, 0x44}, {0x4f, 0x4d, 0x52}, {0x50, 0x41, 0x42}, {0x50, 0x45, 0x49}, {0x50, 0x45, 0x4e}, {0x50, 0x45, 0x53}, {0x50, 0x47, 0x4b}, {0x50, 0x48, 0x50}, {0x50, 0x4b, 0x52}, {0x50, 0x4c, 0x4e}, {0x50, 0x4c, 0x5a}, {0x50, 0x54, 0x45}, {0x50, 0x59, 0x47}, {0x51, 0x41, 0x52}, {0x52, 0x48, 0x44}, {0x52, 0x4f, 0x4c}, {0x52, 0x4f, 0x4e}, {0x52, 0x53, 0x44}, {0x52, 0x55, 0x42}, {0x52, 0x55, 0x52}, {0x52, 0x57, 0x46}, {0x53, 0x41, 0x52}, {0x53, 0x42, 0x44}, {0x53, 0x43, 0x52}, {0x53, 0x44, 0x44}, {0x53, 0x44, 0x47}, {0x53, 0x44, 0x50}, {0x53, 0x45, 0x4b}, {0x53, 0x47, 0x44}, {0x53, 0x48, 0x50}, {0x53, 0x49, 0x54}, {0x53, 0x4b, 0x4b}, {0x53, 0x4c, 0x4c}, {0x53, 0x4f, 0x53}, {0x53, 0x52, 0x44}, {0x53, 0x52, 0x47}, {0x53, 0x53, 0x50}, {0x53, 0x54, 0x44}, {0x53, 0x55, 0x52}, {0x53, 0x56, 0x43}, {0x53, 0x59, 0x50}, {0x53, 0x5a, 0x4c}, {0x54, 0x48, 0x42}, {0x54, 0x4a, 0x52}, {0x54, 0x4a, 0x53}, {0x54, 0x4d, 0x4d}, {0x54, 0x4d, 0x54}, {0x54, 0x4e, 0x44}, {0x54, 0x4f, 0x50}, {0x54, 0x50, 0x45}, {0x54, 0x52, 0x4c}, {0x54, 0x52, 0x59}, {0x54, 0x54, 0x44}, {0x54, 0x57, 0x44}, {0x54, 0x5a, 0x53}, {0x55, 0x41, 0x48}, {0x55, 0x41, 0x4b}, {0x55, 0x47, 0x53}, {0x55, 0x47, 0x58}, {0x55, 0x53, 0x44}, {0x55, 0x53, 0x4e}, {0x55, 0x53, 0x53}, {0x55, 0x59, 0x49}, {0x55, 0x59, 0x50}, {0x55, 0x59, 0x55}, {0x55, 0x5a, 0x53}, {0x56, 0x45, 0x42}, {0x56, 0x45, 0x46}, {0x56, 0x4e, 0x44}, {0x56, 0x4e, 0x4e}, {0x56, 0x55, 0x56}, {0x57, 0x53, 0x54}, {0x58, 0x41, 0x46}, {0x58, 0x41, 0x47}, {0x58, 0x41, 0x55}, {0x58, 0x42, 0x41}, {0x58, 0x42, 0x42}, {0x58, 0x42, 0x43}, {0x58, 0x42, 0x44}, {0x58, 0x43, 0x44}, {0x58, 0x44, 0x52}, {0x58, 0x45, 0x55}, {0x58, 0x46, 0x4f}, {0x58, 0x46, 0x55}, {0x58, 0x4f, 0x46}, {0x58, 0x50, 0x44}, {0x58, 0x50, 0x46}, {0x58, 0x50, 0x54}, {0x58, 0x52, 0x45}, {0x58, 0x53, 0x55}, {0x58, 0x54, 0x53}, {0x58, 0x55, 0x41}, {0x58, 0x58, 0x58}, {0x59, 0x44, 0x44}, {0x59, 0x45, 0x52}, {0x59, 0x55, 0x44}, {0x59, 0x55, 0x4d}, {0x59, 0x55, 0x4e}, {0x59, 0x55, 0x52}, {0x5a, 0x41, 0x4c}, {0x5a, 0x41, 0x52}, {0x5a, 0x4d, 0x4b}, {0x5a, 0x4d, 0x57}, {0x5a, 0x52, 0x4e}, {0x5a, 0x52, 0x5a}, {0x5a, 0x57, 0x44}, {0x5a, 0x57, 0x4c}, {0x5a, 0x57, 0x52}},
		currencyNegativePrefix: []byte{0x2d},
		monthsAbbreviated:      [][]uint8{[]uint8(nil), {0xe0, 0xba, 0xa1, 0x2e, 0xe0, 0xba, 0x81, 0x2e}, {0xe0, 0xba, 0x81, 0x2e, 0xe0, 0xba, 0x9e, 0x2e}, {0xe0, 0xba, 0xa1, 0x2e, 0xe0, 0xba, 0x99, 0x2e}, {0xe0, 0xba, 0xa1, 0x2e, 0xe0, 0xba, 0xaa, 0x2e}, {0xe0, 0xba, 0x9e, 0x2e, 0xe0, 0xba, 0x9e, 0x2e}, {0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb4, 0x2e, 0xe0, 0xba, 0x96, 0x2e}, {0xe0, 0xba, 0x81, 0x2e, 0xe0, 0xba, 0xa5, 0x2e}, {0xe0, 0xba, 0xaa, 0x2e, 0xe0, 0xba, 0xab, 0x2e}, {0xe0, 0xba, 0x81, 0x2e, 0xe0, 0xba, 0x8d, 0x2e}, {0xe0, 0xba, 0x95, 0x2e, 0xe0, 0xba, 0xa5, 0x2e}, {0xe0, 0xba, 0x9e, 0x2e, 0xe0, 0xba, 0x88, 0x2e}, {0xe0, 0xba, 0x97, 0x2e, 0xe0, 0xba, 0xa7, 0x2e}},
		monthsNarrow:           [][]uint8{[]uint8(nil), {0x31}, {0x32}, {0x33}, {0x34}, {0x35}, {0x36}, {0x37}, {0x38}, {0x39}, {0x31, 0x30}, {0x31, 0x31}, {0x31, 0x32}},
		monthsWide:             [][]uint8{[]uint8(nil), {0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99}, {0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb8, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb2}, {0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb5, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2}, {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb2}, {0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb6, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb2}, {0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb8, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2}, {0xe0, 0xba, 0x81, 0xe0, 0xbb, 0x8d, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x94}, {0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0xab, 0xe0, 0xba, 0xb2}, {0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x8d, 0xe0, 0xba, 0xb2}, {0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb8, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2}, {0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x88, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x81}, {0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb2}},
		daysAbbreviated:        [][]uint8{{0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x94}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x88, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x84, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb8, 0xe0, 0xba, 0x94}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0xab, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x94}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb8, 0xe0, 0xba, 0x81}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0xb2}},
		daysNarrow:             [][]uint8{{0x31}, {0x32}, {0x33}, {0x34}, {0x35}, {0x36}, {0x37}},
		daysShort:              [][]uint8{{0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0x2e}, {0xe0, 0xba, 0x88, 0x2e}, {0xe0, 0xba, 0xad, 0x2e}, {0xe0, 0xba, 0x9e, 0x2e}, {0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xab, 0x2e}, {0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb8, 0x2e}, {0xe0, 0xba, 0xaa, 0x2e}},
		daysWide:               [][]uint8{{0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x94}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x88, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x84, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb8, 0xe0, 0xba, 0x94}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0xab, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x94}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb8, 0xe0, 0xba, 0x81}, {0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0xb2}},
		periodsAbbreviated:     [][]uint8{{0xe0, 0xba, 0x81, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87}, {0xe0, 0xba, 0xab, 0xe0, 0xba, 0xbc, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87}},
		periodsNarrow:          [][]uint8{{0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xbb, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xb2}, {0xe0, 0xba, 0xab, 0xe0, 0xba, 0xbc, 0xe0, 0xba, 0x97}},
		periodsWide:            [][]uint8{{0xe0, 0xba, 0x81, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87}, {0xe0, 0xba, 0xab, 0xe0, 0xba, 0xbc, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87}},
		erasAbbreviated:        [][]uint8{{0xe0, 0xba, 0x81, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0x20, 0xe0, 0xba, 0x84, 0x2e, 0xe0, 0xba, 0xaa, 0x2e}, {0xe0, 0xba, 0x84, 0x2e, 0xe0, 0xba, 0xaa, 0x2e}},
		erasNarrow:             [][]uint8{[]uint8(nil), []uint8(nil)},
		erasWide:               [][]uint8{{0xe0, 0xba, 0x81, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x84, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94}, {0xe0, 0xba, 0x84, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94}},
		timezones:              map[string][]uint8{"WARST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x88, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2}, "EST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x81}, "OESZ": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xa2, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0x9a, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x81}, "UYT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0x8d}, "SAST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x83, 0xe0, 0xba, 0x95, 0xe0, 0xbb, 0x89}, "BOT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0x9a, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0x8d}, "VET": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xad, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2}, "TMT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0x81, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99}, "AWDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa3, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "HKT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x87}, "IST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0x20, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x99, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x8d}, "JDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8d, 0xe0, 0xba, 0xb5, 0xe0, 0xbb, 0x88, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9b, 0xe0, 0xba, 0xb8, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0x99}, "WART": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x88, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2}, "ARST": {0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x88, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2}, "AWST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa3, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "HKST": {0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x87}, "JST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8d, 0xe0, 0xba, 0xb5, 0xe0, 0xbb, 0x88, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9b, 0xe0, 0xba, 0xb8, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0x99}, "HNT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x81, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0x99}, "MYT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa5, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0x8d}, "COT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0x84, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb3, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x9a, 0xe0, 0xba, 0x8d}, "ECT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xad, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xbb, 0x8d}, "CLST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb5}, "∅∅∅": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x82, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xa3}, "WESZ": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xa2, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0x9a, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "GYT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x8d, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2}, "SGT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0x9b}, "TMST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0x81, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99}, "AKDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb0, 0xe0, 0xbb, 0x81, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2}, "MST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0xb2}, "PST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x82, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x9b, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb5, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x81}, "UYST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0x8d}, "WIB": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0x8d, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "AKST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb0, 0xe0, 0xbb, 0x81, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2}, "MEZ": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa2, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0x9a, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87}, "BT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9e, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99}, "ACWST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa3, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "CHAST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1}, "EDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x81}, "ACWDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa3, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "MESZ": {0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa2, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0x9a, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87}, "AEST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe2, 0x80, 0x8b, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa3, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x81}, "AEDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa3, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x81}, "WAT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "HAT": {0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x81, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0x99}, "ACDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa3, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0x8d, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87}, "WAST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "EAT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x81}, "GMT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb5, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8a}, "NZST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb5, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x81, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0x99}, "COST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0x84, 0xe0, 0xba, 0xa5, 0xe0, 0xbb, 0x8d, 0xe0, 0xba, 0xb2, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x9a, 0xe0, 0xba, 0x8d}, "LHST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xae, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0xb2}, "ART": {0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x88, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2}, "PDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x82, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0x9b, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb5, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x81}, "AST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x82, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe0, 0xbb, 0x81, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x81}, "WITA": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0x8d, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87}, "NZDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb5, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x81, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0x99}, "GFT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x9f, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8a, 0xe0, 0xbb, 0x8c, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0x8d, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2}, "WIT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0x8d, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x81}, "CAT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x9f, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87}, "ChST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x88, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa1, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa3}, "CLT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb5}, "HAST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xae, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x8d, 0x2d, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb9, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x99}, "HADT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0xae, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x8d, 0x2d, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb9, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x99}, "LHDT": {0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xaa, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xae, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b}, "SRT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb8, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0xb4, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1}, "MDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0xb9, 0xe0, 0xba, 0xae, 0xe0, 0xbb, 0x89, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0xb2}, "ADT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x82, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x87, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xb2, 0xe0, 0xbb, 0x81, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x81}, "CHADT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xbb, 0x88, 0xe0, 0xba, 0xbd, 0xe0, 0xba, 0x87, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x8a, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1}, "ACST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xaa, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xa3, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0x8d, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x81, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87}, "WEZ": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xa2, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0x9a, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xbb, 0xe0, 0xba, 0x81}, "CST": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x94, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87}, "CDT": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0x81, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x87}, "OEZ": {0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa5, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x94, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb0, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x96, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xa2, 0xe0, 0xba, 0xb9, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa3, 0xe0, 0xba, 0x9a, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0x95, 0xe0, 0xba, 0xb2, 0xe2, 0x80, 0x8b, 0xe0, 0xbb, 0x80, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb1, 0xe0, 0xba, 0x99, 0xe2, 0x80, 0x8b, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0xad, 0xe0, 0xba, 0x81}},
	}
}

// Locale returns the current translators string locale
func (lo *lo_LA) Locale() string {
	return lo.locale
}

// PluralsCardinal returns the list of cardinal plural rules associated with 'lo_LA'
func (lo *lo_LA) PluralsCardinal() []locales.PluralRule {
	return lo.pluralsCardinal
}

// PluralsOrdinal returns the list of ordinal plural rules associated with 'lo_LA'
func (lo *lo_LA) PluralsOrdinal() []locales.PluralRule {
	return lo.pluralsOrdinal
}

// CardinalPluralRule returns the cardinal PluralRule given 'num' and digits/precision of 'v' for 'lo_LA'
func (lo *lo_LA) CardinalPluralRule(num float64, v uint64) locales.PluralRule {
	return locales.PluralRuleOther
}

// OrdinalPluralRule returns the ordinal PluralRule given 'num' and digits/precision of 'v' for 'lo_LA'
func (lo *lo_LA) OrdinalPluralRule(num float64, v uint64) locales.PluralRule {

	n := math.Abs(num)

	if n == 1 {
		return locales.PluralRuleOne
	}

	return locales.PluralRuleOther
}

// RangePluralRule returns the ordinal PluralRule given 'num1', 'num2' and digits/precision of 'v1' and 'v2' for 'lo_LA'
func (lo *lo_LA) RangePluralRule(num1 float64, v1 uint64, num2 float64, v2 uint64) locales.PluralRule {
	return locales.PluralRuleOther
}

// MonthAbbreviated returns the locales abbreviated month given the 'month' provided
func (lo *lo_LA) MonthAbbreviated(month time.Month) []byte {
	return lo.monthsAbbreviated[month]
}

// MonthsAbbreviated returns the locales abbreviated months
func (lo *lo_LA) MonthsAbbreviated() [][]byte {
	return lo.monthsAbbreviated[1:]
}

// MonthNarrow returns the locales narrow month given the 'month' provided
func (lo *lo_LA) MonthNarrow(month time.Month) []byte {
	return lo.monthsNarrow[month]
}

// MonthsNarrow returns the locales narrow months
func (lo *lo_LA) MonthsNarrow() [][]byte {
	return lo.monthsNarrow[1:]
}

// MonthWide returns the locales wide month given the 'month' provided
func (lo *lo_LA) MonthWide(month time.Month) []byte {
	return lo.monthsWide[month]
}

// MonthsWide returns the locales wide months
func (lo *lo_LA) MonthsWide() [][]byte {
	return lo.monthsWide[1:]
}

// WeekdayAbbreviated returns the locales abbreviated weekday given the 'weekday' provided
func (lo *lo_LA) WeekdayAbbreviated(weekday time.Weekday) []byte {
	return lo.daysAbbreviated[weekday]
}

// WeekdaysAbbreviated returns the locales abbreviated weekdays
func (lo *lo_LA) WeekdaysAbbreviated() [][]byte {
	return lo.daysAbbreviated
}

// WeekdayNarrow returns the locales narrow weekday given the 'weekday' provided
func (lo *lo_LA) WeekdayNarrow(weekday time.Weekday) []byte {
	return lo.daysNarrow[weekday]
}

// WeekdaysNarrow returns the locales narrow weekdays
func (lo *lo_LA) WeekdaysNarrow() [][]byte {
	return lo.daysNarrow
}

// WeekdayShort returns the locales short weekday given the 'weekday' provided
func (lo *lo_LA) WeekdayShort(weekday time.Weekday) []byte {
	return lo.daysShort[weekday]
}

// WeekdaysShort returns the locales short weekdays
func (lo *lo_LA) WeekdaysShort() [][]byte {
	return lo.daysShort
}

// WeekdayWide returns the locales wide weekday given the 'weekday' provided
func (lo *lo_LA) WeekdayWide(weekday time.Weekday) []byte {
	return lo.daysWide[weekday]
}

// WeekdaysWide returns the locales wide weekdays
func (lo *lo_LA) WeekdaysWide() [][]byte {
	return lo.daysWide
}

// FmtNumber returns 'num' with digits/precision of 'v' for 'lo_LA' and handles both Whole and Real numbers based on 'v'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtNumber(num float64, v uint64) []byte {

	s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)
	return []byte(s)
}

// FmtPercent returns 'num' with digits/precision of 'v' for 'lo_LA' and handles both Whole and Real numbers based on 'v'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
// NOTE: 'num' passed into FmtPercent is assumed to be in percent already
func (lo *lo_LA) FmtPercent(num float64, v uint64) []byte {

	s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)
	l := len(s) + len(lo.decimal)
	b := make([]byte, 0, l)

	for i := len(s) - 1; i >= 0; i-- {

		if s[i] == '.' {
			b = append(b, lo.decimal[0])
			continue
		}

		b = append(b, s[i])
	}

	if num < 0 {
		b = append(b, lo.minus[0])
	}

	// reverse
	for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {
		b[i], b[j] = b[j], b[i]
	}

	b = append(b, lo.percent...)

	return b
}

// FmtCurrency returns the currency representation of 'num' with digits/precision of 'v' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtCurrency(num float64, v uint64, currency currency.Type) []byte {

	s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)
	symbol := lo.currencies[currency]
	l := len(s) + len(lo.decimal) + len(lo.group)*len(s[:len(s)-int(v)-1])/3
	count := 0
	inWhole := v == 0
	b := make([]byte, 0, l)

	for i := len(s) - 1; i >= 0; i-- {

		if s[i] == '.' {
			b = append(b, lo.decimal[0])
			inWhole = true
			continue
		}

		if inWhole {
			if count == 3 {
				b = append(b, lo.group[0])
				count = 1
			} else {
				count++
			}
		}

		b = append(b, s[i])
	}

	for j := len(symbol) - 1; j >= 0; j-- {
		b = append(b, symbol[j])
	}

	if num < 0 {
		b = append(b, lo.minus[0])
	}

	// reverse
	for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {
		b[i], b[j] = b[j], b[i]
	}

	if int(v) < 2 {

		if v == 0 {
			b = append(b, lo.decimal...)
		}

		for i := 0; i < 2-int(v); i++ {
			b = append(b, '0')
		}
	}

	return b
}

// FmtAccounting returns the currency representation of 'num' with digits/precision of 'v' for 'lo_LA'
// in accounting notation. returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtAccounting(num float64, v uint64, currency currency.Type) []byte {

	s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)
	symbol := lo.currencies[currency]
	l := len(s) + len(lo.decimal) + len(lo.group)*len(s[:len(s)-int(v)-1])/3
	count := 0
	inWhole := v == 0
	b := make([]byte, 0, l)

	for i := len(s) - 1; i >= 0; i-- {

		if s[i] == '.' {
			b = append(b, lo.decimal[0])
			inWhole = true
			continue
		}

		if inWhole {
			if count == 3 {
				b = append(b, lo.group[0])
				count = 1
			} else {
				count++
			}
		}

		b = append(b, s[i])
	}

	if num < 0 {

		for j := len(symbol) - 1; j >= 0; j-- {
			b = append(b, symbol[j])
		}

		for j := len(lo.currencyNegativePrefix) - 1; j >= 0; j-- {
			b = append(b, lo.currencyNegativePrefix[j])
		}

	} else {

		for j := len(symbol) - 1; j >= 0; j-- {
			b = append(b, symbol[j])
		}

	}

	// reverse
	for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {
		b[i], b[j] = b[j], b[i]
	}

	if int(v) < 2 {

		if v == 0 {
			b = append(b, lo.decimal...)
		}

		for i := 0; i < 2-int(v); i++ {
			b = append(b, '0')
		}
	}

	return b
}

// FmtDateShort returns the short date representation of 't' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtDateShort(t time.Time) []byte {

	b := make([]byte, 0, 32)

	b = strconv.AppendInt(b, int64(t.Day()), 10)
	b = append(b, []byte{0x2f}...)
	b = strconv.AppendInt(b, int64(t.Month()), 10)
	b = append(b, []byte{0x2f}...)
	b = strconv.AppendInt(b, int64(t.Year()), 10)

	return b
}

// FmtDateMedium returns the medium date representation of 't' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtDateMedium(t time.Time) []byte {

	b := make([]byte, 0, 32)

	b = strconv.AppendInt(b, int64(t.Day()), 10)
	b = append(b, []byte{0x20}...)
	b = append(b, lo.monthsAbbreviated[t.Month()]...)
	b = append(b, []byte{0x20}...)
	b = strconv.AppendInt(b, int64(t.Year()), 10)

	return b
}

// FmtDateLong returns the long date representation of 't' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtDateLong(t time.Time) []byte {

	b := make([]byte, 0, 32)

	b = strconv.AppendInt(b, int64(t.Day()), 10)
	b = append(b, []byte{0x20}...)
	b = append(b, lo.monthsWide[t.Month()]...)
	b = append(b, []byte{0x20}...)
	b = strconv.AppendInt(b, int64(t.Year()), 10)

	return b
}

// FmtDateFull returns the full date representation of 't' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtDateFull(t time.Time) []byte {

	b := make([]byte, 0, 32)

	b = append(b, lo.daysWide[t.Day()]...)
	b = append(b, []byte{0x20, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb5, 0x20}...)
	b = strconv.AppendInt(b, int64(t.Day()), 10)
	b = append(b, []byte{0x20}...)
	b = append(b, lo.monthsWide[t.Month()]...)
	b = append(b, []byte{0x20}...)

	if t.Year() < 0 {
		b = append(b, lo.erasAbbreviated[0]...)
	} else {
		b = append(b, lo.erasAbbreviated[1]...)
	}

	b = append(b, []byte{0x20}...)
	b = strconv.AppendInt(b, int64(t.Year()), 10)

	return b
}

// FmtTimeShort returns the short time representation of 't' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtTimeShort(t time.Time) []byte {

	b := make([]byte, 0, 32)

	b = strconv.AppendInt(b, int64(t.Hour()), 10)
	b = append(b, lo.timeSeparator...)

	if t.Minute() < 10 {
		b = append(b, '0')
	}

	b = strconv.AppendInt(b, int64(t.Minute()), 10)

	return b
}

// FmtTimeMedium returns the medium time representation of 't' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtTimeMedium(t time.Time) []byte {

	b := make([]byte, 0, 32)

	b = strconv.AppendInt(b, int64(t.Hour()), 10)
	b = append(b, lo.timeSeparator...)

	if t.Minute() < 10 {
		b = append(b, '0')
	}

	b = strconv.AppendInt(b, int64(t.Minute()), 10)
	b = append(b, lo.timeSeparator...)

	if t.Second() < 10 {
		b = append(b, '0')
	}

	b = strconv.AppendInt(b, int64(t.Second()), 10)

	return b
}

// FmtTimeLong returns the long time representation of 't' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtTimeLong(t time.Time) []byte {

	b := make([]byte, 0, 32)

	b = strconv.AppendInt(b, int64(t.Hour()), 10)
	b = append(b, []byte{0x20, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0x87, 0x20}...)
	b = strconv.AppendInt(b, int64(t.Minute()), 10)
	b = append(b, []byte{0x20, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb5, 0x20}...)

	if t.Second() < 10 {
		b = append(b, '0')
	}

	b = strconv.AppendInt(b, int64(t.Second()), 10)
	b = append(b, []byte{0x20, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb5, 0x20}...)

	tz, _ := t.Zone()
	b = append(b, tz...)

	return b
}

// FmtTimeFull returns the full time representation of 't' for 'lo_LA'
// returned as a []byte just in case the caller wishes to add more and can help
// avoid allocations; otherwise just cast as string.
func (lo *lo_LA) FmtTimeFull(t time.Time) []byte {

	b := make([]byte, 0, 32)

	b = strconv.AppendInt(b, int64(t.Hour()), 10)
	b = append(b, []byte{0x20, 0xe0, 0xbb, 0x82, 0xe0, 0xba, 0xa1, 0xe0, 0xba, 0x87, 0x20}...)
	b = strconv.AppendInt(b, int64(t.Minute()), 10)
	b = append(b, []byte{0x20, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb5, 0x20}...)

	if t.Second() < 10 {
		b = append(b, '0')
	}

	b = strconv.AppendInt(b, int64(t.Second()), 10)
	b = append(b, []byte{0x20, 0xe0, 0xba, 0xa7, 0xe0, 0xba, 0xb4, 0xe0, 0xba, 0x99, 0xe0, 0xba, 0xb2, 0xe0, 0xba, 0x97, 0xe0, 0xba, 0xb5, 0x20}...)

	tz, _ := t.Zone()

	if btz, ok := lo.timezones[tz]; ok {
		b = append(b, btz...)
	} else {
		b = append(b, tz...)
	}

	return b
}
