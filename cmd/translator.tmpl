{{ define "translator" }}
package {{ .Locale }}

import (
	"math"

	"github.com/go-playground/locales"
)

type {{ .Locale }} struct {
	locale     string
	plurals    []locales.PluralRule
	decimal    []byte
	group      []byte
	minus      []byte
	percent    []byte
	perMille   []byte
	currencies [][]byte // idx = enum of currency code
}

// New returns a new instance of translator for the '{{ .Locale }}' locale
func New() locales.Translator {
	return &{{ .Locale }}{
		locale:   		"{{ .Locale }}",
		plurals:  		{{ .Plurals }},
		decimal:  		{{ .Decimal }},
		group:    		{{ .Group }},
		minus:    		{{ .Minus }},
		percent:  		{{ .Percent }},
		perMille:       {{ .PerMille }},
		currencies:     {{ .Currencies }},
	}
}

// Locale returns the current translators string locale
func(t *{{ .Locale }}) Locale() string {
	return t.locale
}

// PluralsCardinal returns the list of cardinal plural rules associated with '{{ .Locale }}'
func(t *{{ .Locale }}) PluralsCardinal() []locales.PluralRule {
	return t.plurals
}

// cardinalPluralRule returns the PluralRule given 'num' and digits/precision of 'v' for '{{ .Locale }}'
func(t *{{ .Locale }}) cardinalPluralRule(num float64, v uint64) locales.PluralRule {
	{{ .CardinalFunc }}
}

{{ end }}